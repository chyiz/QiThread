/* Copyright (c) 2013,  Regents of the Columbia University 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other 
 * materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// RUN: %srcroot/test/runtime/run-scheduler-test.py %s -gxx "%gxx" -objroot "%objroot" -ternruntime "%ternruntime" -ternannotlib "%ternannotlib"

#include <sys/time.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>
#include <assert.h>
#include <unistd.h>
#include <errno.h>

#define N (2)

sem_t sem, another_sem;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;

void* sem_wait_func(void *arg) {
  char buf[64];
  int tid = (intptr_t)arg;

  for(unsigned i=0;i<10;++i)
    sched_yield();

  int ret;
  struct timespec   ts;
  struct timeval    tp;

  // test 3 different ways of sem_wait
  switch(tid % 3) {
  case 0:
    sem_wait(&sem);
    break;
  case 1:
    do{
      ret = sem_trywait(&sem);
    } while(ret!=0);
    break;
  case 2:
    do {
      gettimeofday(&tp, NULL);
      ts.tv_sec  = tp.tv_sec;
      ts.tv_nsec = tp.tv_usec * 1000 + 100;
      ret = sem_timedwait(&sem, &ts);
    } while(ret!=0);
    break;
  }

  printf("%03d WAKES UP\n", tid);
  printf("%03d POSTS\n", tid);

  sem_post(&another_sem);
}

void* sem_post_func(void *arg) {
  char buf[64];
  int tid = (intptr_t)arg;

  for(unsigned i=0;i<100;++i)
    sched_yield();

  printf("%03d POSTS\n", tid);
  sem_post(&sem);
  sem_wait(&another_sem);
  printf("%03d WAKES UP\n", tid);
}

int main(int argc, char *argv[], char *env[]) {
  int ret;
  pthread_t th[N];

  sem_init(&sem, 0, 0);
  sem_init(&another_sem, 0, 0);

  for(unsigned i=0; i<N/2; ++i) {
    ret  = pthread_create(&th[i], NULL, sem_wait_func, (void*)i);
    assert(!ret && "pthread_create() failed!");
  }

  for(unsigned i=(N+1)/2; i<N; ++i) {
    ret  = pthread_create(&th[i], NULL, sem_post_func, (void*)i);
    assert(!ret && "pthread_create() failed!");
  }

  for(unsigned i=0; i<N; ++i)
    pthread_join(th[i], NULL);

  sem_destroy(&sem);
}

// CHECK indicates expected output checked by FileCheck; auto-generated by appending -gen to the RUN command above.
// CHECK:      001 POSTS
// CHECK-NEXT: 000 WAKES UP
// CHECK-NEXT: 000 POSTS
// CHECK-NEXT: 001 WAKES UP
