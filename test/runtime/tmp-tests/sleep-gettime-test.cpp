/* Copyright (c) 2013,  Regents of the Columbia University 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other 
 * materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// RUN: %srcroot/test/runtime/run-scheduler-test.py %s -gxx "%gxx" -objroot "%objroot" -ternruntime "%ternruntime" -ternannotlib "%ternannotlib"

#include <sys/time.h>
#include <time.h>
#include <errno.h>
#include <assert.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define N 100

pthread_mutex_t mu = PTHREAD_MUTEX_INITIALIZER;

struct timespec oldts;
struct timeval oldtv;
time_t oldtt;

//  require mu hold before calling this function
void check_time(bool init = false)
{  
  struct timespec ts;
  struct timeval tv;
  time_t tt;

  gettimeofday(&tv, NULL);
  clock_gettime(CLOCK_REALTIME, &ts);
  time(&tt);
  
  if (!init)
  {
    if (tv.tv_sec < oldtv.tv_sec || 
      tv.tv_sec == oldtv.tv_sec && tv.tv_usec < oldtv.tv_usec)
      assert(0 && "gettimeofday is not monotonic");

    if (tv.tv_sec < oldts.tv_sec || 
      tv.tv_sec == oldts.tv_sec && tv.tv_usec * 1000 < oldts.tv_nsec)
      assert(0 && "gettimeofday is not monotonic");

    if (tv.tv_sec < oldtt)
      assert(0 && "gettimeofday is not monotonic");
  
    if (ts.tv_sec < oldts.tv_sec || 
      ts.tv_sec == oldts.tv_sec && ts.tv_nsec < oldts.tv_nsec)
      assert(0 && "clock_gettime is not monotonic");

    if (ts.tv_sec < oldtv.tv_sec || 
      ts.tv_sec == oldtv.tv_sec && ts.tv_nsec < oldtv.tv_usec * 1000)
      assert(0 && "clock_gettime is not monotonic");

    if (ts.tv_sec < oldtt)
      assert(0 && "clock_gettime is not monotonic");
  
    if (tt < oldtt)
      assert(0 && "time() is not monotonic");

#if 0
    // YJF: this fails roughly 2 out of 100 runs.  disable to make nightly
    // test work
    if(tt < oldtv.tv_sec ||tt < oldts.tv_sec)
      assert(0 && "time() and clock_gettime() is not monotonic");
#endif
  }

  oldts = ts;
  oldtv = tv;
  oldtt = tt;
}

void* thread_func(void*) {
  for(unsigned i=0;i<100;++i)
    sched_yield();

  pthread_mutex_lock(&mu);

  check_time();
  usleep(10000);

  pthread_mutex_unlock(&mu);
}


int main(int argc, char *argv[], char *env[]) {
  int ret;
  pthread_t th[N];

  check_time(true);
  for (int i = 0; i < N; ++i)
    pthread_create(&th[i], NULL, thread_func, NULL);

  for (int i = 0; i < N; ++i)
    pthread_join(th[i], NULL);

  printf("test done\n");

  return 0;
}

// CHECK indicates expected output checked by FileCheck; auto-generated by appending -gen to the RUN command above.
// CHECK:      test done
