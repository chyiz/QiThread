/* Copyright (c) 2013,  Regents of the Columbia University 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other 
 * materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// RUN: %srcroot/test/runtime/run-scheduler-test.py %s -gxx "%gxx" -objroot "%objroot" -ternruntime "%ternruntime" -ternannotlib "%ternannotlib"

#include <sys/time.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <assert.h>
#include <unistd.h>
#include <errno.h>
#include <semaphore.h>

// tests that we need to loop when implementing an acquire operation with
// the corresponding try-acquire operation

// RR schedule
// thread_begin
// pthread_create
//                  thread_begin
// pthread_create
//                  sem_post
//                                thread_begin
// lock
//                  sem_post
//                                lock (wait)
// unlock(signal)
//                  lock(grabs lock
//                   before thread 3)
//                                lock (wait again)
// pthread_join(wait)
//                  unlock(signal)
//                                lock (wait returns)
//                  thread_end
//                                unlock
// pthread_join(wait returns)
//                                thread_end
// pthread_join
// thread_end
// ... the schedule for sem_wait is similar

pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;
sem_t s;
sem_t noop;

void* thread_func1(void *arg) {
  sem_post(&noop);
  sem_post(&noop);
  pthread_mutex_lock(&m);
  pthread_mutex_unlock(&m);
}

void* thread_func2(void *arg) {
  pthread_mutex_lock(&m);
  pthread_mutex_unlock(&m);
}

void* thread_func3(void *arg) {
  sem_post(&noop);
  sem_post(&noop);
  sem_wait(&s);
  sem_post(&s);
}

void* thread_func4(void *arg) {
  sem_wait(&s);
  sem_post(&s);
}

int main(int argc, char *argv[], char *env[]) {
  int ret;
  pthread_t th1, th2;

  sem_init(&noop, 0, 0);
  sem_init(&s, 0, 1);

  // test mutex
  ret  = pthread_create(&th1, NULL, thread_func1, NULL);
  assert(!ret && "pthread_create() failed!");
  ret  = pthread_create(&th2, NULL, thread_func2, NULL);

  pthread_mutex_lock(&m);
  pthread_mutex_unlock(&m);

  assert(!ret && "pthread_create() failed!");
  pthread_join(th1, NULL);
  pthread_join(th2, NULL);

  printf("done mutex try-loop test\n");

  // test semaphore
  ret  = pthread_create(&th1, NULL, thread_func3, NULL);
  assert(!ret && "pthread_create() failed!");
  ret  = pthread_create(&th2, NULL, thread_func4, NULL);

  sem_wait(&s);
  sem_post(&s);

  assert(!ret && "pthread_create() failed!");
  pthread_join(th1, NULL);
  pthread_join(th2, NULL);

  printf("done semaphore try-loop test\n");

  return 0;
}
// CHECK indicates expected output checked by FileCheck; auto-generated by appending -gen to the RUN command above.
// CHECK:      done mutex try-loop test
// CHECK-NEXT: done semaphore try-loop test
