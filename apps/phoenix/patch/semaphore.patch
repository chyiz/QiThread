--- phoenix-2.0.0/src/tpool.c	2013-03-27 16:28:41.321025487 -0400
+++ phoenix-2.0.0/src/tpool.c	2013-03-27 16:46:21.904988727 -0400
@@ -34,10 +34,27 @@
 #include "stddefines.h"
 #include "tern/user.h"
 
+#define REPLACE_SEM
+#define REPLACE_SEM_all
+
+typedef struct {
+    pthread_mutex_t mutex;
+    pthread_cond_t cond_var;
+    int flag;
+} sem_cond;
+
 typedef struct {
-    sem_t           sem_run;
     unsigned int    *num_workers_done;
+#ifndef REPLACE_SEM_all
     sem_t           *sem_all_workers_done;
+#else
+    sem_cond        *sem_all_workers_done;
+#endif
+#ifndef REPLACE_SEM
+    sem_t           sem_run;
+#else
+    sem_cond        sem_run;
+#endif
     thread_func     *thread_func;
     void            **thread_func_arg;
     void            **ret;
@@ -50,7 +67,11 @@
     int             num_workers;
     int             die;
     thread_func     thread_func;
+#ifndef REPLACE_SEM_all
     sem_t           sem_all_workers_done;
+#else
+    sem_cond        sem_all_workers_done;
+#endif
     unsigned int    num_workers_done;
     void            **args;
     pthread_t       *threads;
@@ -85,9 +106,14 @@
     if (tpool->thread_args == NULL) 
         goto fail_thread_args;
 
+#ifndef REPLACE_SEM_all
     ret = sem_init (&tpool->sem_all_workers_done, 0, 0);
     if (ret != 0) 
         goto fail_all_workers_done;
+#else
+    pthread_mutex_init(&(tpool->sem_all_workers_done.mutex), NULL);
+    pthread_cond_init(&(tpool->sem_all_workers_done.cond_var), NULL);
+#endif
 
     CHECK_ERROR (pthread_attr_init (&attr));
     CHECK_ERROR (pthread_attr_setscope (&attr, PTHREAD_SCOPE_SYSTEM));
@@ -99,7 +125,13 @@
     soba_init(2, num_threads, num_threads*20);
     for (i = 0; i < num_threads; ++i) {
         /* Initialize thread argument. */
+#ifndef REPLACE_SEM
         CHECK_ERROR (sem_init (&(tpool->thread_args[i].sem_run), 0, 0));
+#else
+        pthread_mutex_init(&(tpool->thread_args[i].sem_run.mutex), NULL);
+        pthread_cond_init(&(tpool->thread_args[i].sem_run.cond_var), NULL);
+        tpool->thread_args[i].sem_run.flag = 0;
+#endif
         tpool->thread_args[i].sem_all_workers_done = 
             &tpool->sem_all_workers_done;
         tpool->thread_args[i].num_workers_done = 
@@ -170,9 +202,17 @@
     tpool->num_workers_done = 0;
 
     for (i = 0; i < tpool->num_workers; ++i) {
+#ifndef REPLACE_SEM
         ret = sem_post (&(tpool->thread_args[i].sem_run));
         if (ret != 0) 
             return -1;
+#else
+        pthread_mutex_lock(&(tpool->thread_args[i].sem_run.mutex));
+        tpool->thread_args[i].sem_run.flag = 1;
+        pthread_cond_signal(&(tpool->thread_args[i].sem_run.cond_var));
+        pthread_mutex_unlock(&(tpool->thread_args[i].sem_run.mutex));
+#endif
+
     }
 
     return 0;
@@ -187,9 +227,18 @@
     if (tpool->num_workers == 0)
         return 0;
 
+#ifndef REPLACE_SEM_all
     ret = sem_wait (&tpool->sem_all_workers_done);
     if (ret != 0) 
         return -1;
+#else
+    pthread_mutex_lock(&(tpool->sem_all_workers_done.mutex));
+    if (tpool->num_workers != tpool->num_workers_done)
+        pthread_cond_wait(&(tpool->sem_all_workers_done.cond_var), &(tpool->sem_all_workers_done.mutex));
+    pthread_cond_broadcast(&(tpool->sem_all_workers_done.cond_var));
+    pthread_mutex_unlock(&(tpool->sem_all_workers_done.mutex));
+#endif
+
 
     return 0;
 }
@@ -227,12 +276,32 @@
         mem_free (tpool->thread_args[i].ret);
 
         tpool->die = 1;
+#ifndef REPLACE_SEM
         sem_post(&tpool->thread_args[i].sem_run);
+#else
+        pthread_mutex_lock(&(tpool->thread_args[i].sem_run.mutex));
+        tpool->thread_args[i].sem_run.flag = 1;
+        pthread_cond_signal(&(tpool->thread_args[i].sem_run.cond_var));
+        pthread_mutex_unlock(&(tpool->thread_args[i].sem_run.mutex));
+#endif
     }
 
+#ifndef REPLACE_SEM_all
     sem_wait(&tpool->sem_all_workers_done);
+#else
+    pthread_mutex_lock(&(tpool->sem_all_workers_done.mutex));
+    pthread_cond_wait(&(tpool->sem_all_workers_done.cond_var), &(tpool->sem_all_workers_done.mutex));
+    pthread_cond_broadcast(&(tpool->sem_all_workers_done.cond_var));
+    pthread_mutex_unlock(&(tpool->sem_all_workers_done.mutex));
+#endif
 
+#ifndef REPLACE_SEM_all
     sem_destroy(&tpool->sem_all_workers_done);
+#else
+    pthread_mutex_destroy(&(tpool->sem_all_workers_done.mutex));
+    pthread_cond_destroy(&(tpool->sem_all_workers_done.cond_var));
+#endif
+
     mem_free (tpool->args);
     mem_free (tpool->threads);
     mem_free (tpool->thread_args);
@@ -254,7 +323,17 @@
 
     while (1)
     {
+#ifndef REPLACE_SEM
         CHECK_ERROR (sem_wait (&thread_arg->sem_run));
+#else
+        pthread_mutex_lock(&(thread_arg->sem_run.mutex));
+        if (thread_arg->sem_run.flag == 0)
+            pthread_cond_wait(&(thread_arg->sem_run.cond_var), &(thread_arg->sem_run.mutex));
+        assert(thread_arg->sem_run.flag == 1);
+        thread_arg->sem_run.flag = 0;
+        pthread_mutex_unlock(&(thread_arg->sem_run.mutex));
+#endif
+
         if (*thread_arg->die)
             break;
 
@@ -269,16 +348,33 @@
         if (num_workers_done == *thread_arg->num_workers)
         {
             /* Everybody's done. */
+#ifndef REPLACE_SEM_all
             CHECK_ERROR (sem_post (thread_arg->sem_all_workers_done));
+#else
+            pthread_mutex_lock(&(thread_arg->sem_all_workers_done->mutex));
+            pthread_cond_broadcast(&(thread_arg->sem_all_workers_done->cond_var));
+            pthread_mutex_unlock(&(thread_arg->sem_all_workers_done->mutex));
+#endif
         }
     }
 
+#ifndef REPLACE_SEM
     sem_destroy (&thread_arg->sem_run);
+#else
+    pthread_mutex_destroy(&(thread_arg->sem_run.mutex));
+    pthread_cond_destroy(&(thread_arg->sem_run.cond_var));
+#endif
     num_workers_done = fetch_and_inc(thread_arg->num_workers_done) + 1;
     if (num_workers_done == *thread_arg->num_workers)
     {
         /* Everybody's done. */
+#ifndef REPLACE_SEM_all
         CHECK_ERROR (sem_post (thread_arg->sem_all_workers_done));
+#else
+        pthread_mutex_lock(&(thread_arg->sem_all_workers_done->mutex));
+        pthread_cond_broadcast(&(thread_arg->sem_all_workers_done->cond_var));
+        pthread_mutex_unlock(&(thread_arg->sem_all_workers_done->mutex));
+#endif
     }
 
     return NULL;
--- phoenix-2.0.0/src/map_reduce.c	2013-03-27 16:47:28.736986414 -0400
+++ phoenix-2.0.0/src/map_reduce.c	2013-03-27 16:49:36.336981995 -0400
@@ -233,10 +233,18 @@
 static void run_combiner (mr_env_t* env, int thread_idx);
 #endif
 
-static __thread int local_tid = -1;
+//static __thread int local_tid = -1;
 static int thread_counter;
 static pthread_mutex_t thread_counter_mutex = PTHREAD_MUTEX_INITIALIZER;
 
+#define HASHSIZE 65536
+static int hashtab[HASHSIZE];
+
+unsigned int hash(pid_t id)
+{
+        return id % HASHSIZE;
+}
+
 static int Pthread_key_create(void * key[], void (*nothing) (void *))
 {
     int i;
@@ -245,29 +253,57 @@
     return 0;
 }
 
-static int
-Pthread_setspecific (void * key[], const void *value)
+int GetLocalTid(void)
 {
-    if (local_tid < 0) {
+    pid_t real_tid = syscall(SYS_gettid);
+    int index = hash(real_tid);
+    //struct nlist *query;
+    if(hashtab[index] == 0)
+    {
         pthread_mutex_lock(&thread_counter_mutex);
-        local_tid = thread_counter++; 
+        hashtab[index] = ++thread_counter;
         pthread_mutex_unlock(&thread_counter_mutex);
     }
-    key[local_tid] = value;
+    return hashtab[index];
+}
+
+static int
+Pthread_setspecific (void * key[], const void *value)
+{
+    key[GetLocalTid()] = value;
     return 0;
 }
 
 void *
 Pthread_getspecific (void * key[])
 {
-    if (local_tid < 0) {
-        pthread_mutex_lock(&thread_counter_mutex);
-        local_tid = thread_counter++;
-        pthread_mutex_unlock(&thread_counter_mutex);
-    }
-    return key[local_tid];
+    return key[GetLocalTid()];
 }
 
+//static int
+//Pthread_setspecific (void * key[], const void *value)
+//{
+//    if (local_tid < 0) {
+//        pthread_mutex_lock(&thread_counter_mutex);
+//        local_tid = thread_counter++; 
+//        pthread_mutex_unlock(&thread_counter_mutex);
+//    }
+//    key[local_tid] = value;
+//    return 0;
+//}
+//
+//void *
+//Pthread_getspecific (void * key[])
+//{
+//    if (local_tid < 0) {
+//        pthread_mutex_lock(&thread_counter_mutex);
+//        local_tid = thread_counter++;
+//        pthread_mutex_unlock(&thread_counter_mutex);
+//    }
+//    return key[local_tid];
+//}
+
+
 
 int 
 map_reduce_init ()
